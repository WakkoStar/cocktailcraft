{"version":3,"sources":["Components/Cocktail/CocktailList.js","Components/Cocktail/Cocktail.js","Components/Cocktail/NewCocktail.js","Components/Cocktail/CocktailHome.js","Components/Ingredient/IngredientList.js","Components/Ingredient/Ingredient.js","Components/Ingredient/NewIngredient.js","Components/Ingredient/IngredientHome.js","Components/Tests/DispoCocktail.js","Components/Tests/Inventory.js","Components/Tests/Craft.js","Components/Tests/CreateCocktail.js","Components/Tests/Test.js","App/App.js","index.js"],"names":["GET_COCKTAILS","gql","DELETE_COCKTAIL","CocktailList","useQuery","loading","error","data","useMutation","supprCocktail","url","useRouteMatch","message","Container","style","marginTop","to","Button","Table","striped","bordered","hover","cocktails","map","id","name","key","onClick","window","confirm","variables","deleteCocktail","GET_COCKTAIL","GET_INGREDIENTS","GET_GOUTS","MODIFY_COCKTAIL","Ingredients","ingredients","updateCallback","selection","useRef","updateCocktail","current","getSelectedItems","selectedIngredients","filter","includes","options","selectedValues","displayValue","ref","onSelect","onRemove","Gouts","gouts","selectedGouts","Cocktail","useParams","useState","cocktail","setCocktail","parseInt","modifyCocktail","useEffect","description","ingredient_id","gout_id","difficulty_id","marginBottom","Form","autoComplete","onSubmit","width","marginLeft","action","method","Group","controlId","Label","Control","type","value","onChange","e","val","target","c","as","rows","selected","variant","CREATE_COCKTAIL","postCocktail","Home","path","exact","href","NewCocktail","DELETE_INGREDIENTS","IngredientList","supprIngredient","aliases","join","location","reload","deleteIngredient","GET_INGREDIENT","MODIFY_INGREDIENT","Ingredient","ingredient","setIngredient","modifyIngredient","split","CREATE_INGREDIENT","createIngredient","NewIngredient","AVAIL_COCKTAILS","Cocktails","useLazyQuery","getAvailCocktails","arrayGout","setArrayGout","availCocktails","reduce","array","push","CountCocktail","length","GET_GOUT","countCocktail","isNaN","gout","GET_INVENTORY_SELECTION","Inventory","allIngredients","inventory","setIngredients","getFilteredIngredients","getInventorySelection","newData","bestIngredients","updateIngredients","inventoryArray","el","cluster","f_gout","f_difficulty","inventorySelection","Craft","clusterList","setClusterList","updateInventory","clusterArray","CREATED_COCKTAILS","getCreatedCocktails","createdCocktails","console","log","Test","setClusterArray","setInventoryArray","inventorySelected","setInventorySelected","DispoCocktail","CreateCocktail","link","HttpLink","uri","cache","InMemoryCache","client","ApolloClient","App","basename","ListGroup","Item","CocktailHome","IngredientHome","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58090306.chunk.js","sourcesContent":["import React from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport {Link, useRouteMatch} from \"react-router-dom\";\r\nimport {Table, Container, Button} from \"react-bootstrap\"\r\nconst GET_COCKTAILS = gql`\r\n  {\r\n    cocktails {\r\n        id\r\n        name\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETE_COCKTAIL = gql`\r\n  mutation DeleteCocktail($id: Int){\r\n    deleteCocktail(id: $id)\r\n  }\r\n`\r\nconst CocktailList = () => {\r\n\r\n    const { loading, error, data } = useQuery(GET_COCKTAILS);\r\n    const[supprCocktail] = useMutation(DELETE_COCKTAIL)\r\n    let {url} = useRouteMatch()\r\n    \r\n    if (loading) return 'Loading...';\r\n    if (error) return `Error! ${error.message}`;\r\n\r\n    const deleteCocktail = (id) => {\r\n      const r = window.confirm(\"Vous etes sur de supprimer ce cocktail ?\")\r\n      if(r) supprCocktail({variables: {id}})\r\n    }\r\n    return (\r\n      <Container style={{marginTop: \"1%\"}}>\r\n\r\n      <h2> Cocktails </h2>\r\n      <Link to={`${url}/new`}><Button>CREER</Button></Link>\r\n      <Table striped bordered hover style={{marginTop: \"1%\"}}> \r\n        {data.cocktails.map(({id, name}) => (\r\n          <tr key={id}>\r\n            <td>\r\n                {name}\r\n            </td>\r\n            <td>\r\n                <Link to={`${url}/${id}`}>Modifier</Link>\r\n            </td>\r\n            <td>\r\n              <Button onClick={() => deleteCocktail(id)}>Supprimer</Button>\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </Table>\r\n\r\n      </Container>\r\n    );\r\n  }\r\n\r\nexport default CocktailList;","import React,{useState , useEffect, useRef} from \"react\";\r\nimport gql from 'graphql-tag';\r\nimport {useParams} from \"react-router-dom\";\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport {Form, Container, Button} from \"react-bootstrap\"\r\nimport { Multiselect } from 'multiselect-react-dropdown';\r\n\r\nconst GET_COCKTAIL = gql`\r\n    query Cocktail($id: Int!) {\r\n        cocktail(id: $id) {\r\n            id\r\n            name\r\n            description\r\n            ingredient_id\r\n            gout_id\r\n            difficulty_id\r\n        }\r\n    }\r\n`;\r\n\r\nconst GET_INGREDIENTS = gql`\r\n    {\r\n        ingredients {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nconst GET_GOUTS = gql`\r\n    {\r\n        gouts {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nconst MODIFY_COCKTAIL = gql`\r\n    mutation ModifyCocktail($name: String, $description: String, $ingredient_id: [Int], $gout_id: [Int], $difficulty_id: Int, $id: Int){\r\n        modifyCocktail(name: $name, description: $description, ingredient_id: $ingredient_id, gout_id: $gout_id, difficulty_id: $difficulty_id, id: $id)\r\n    }\r\n`\r\n\r\nconst Cocktail = () => {\r\n\r\n    \r\n    let { id } = useParams()\r\n    const [ cocktail, setCocktail ] = useState({});\r\n    const { loading, error, data } = useQuery(GET_COCKTAIL, {\r\n        variables: { id : parseInt(id) },\r\n      });\r\n    const [modifyCocktail] = useMutation(MODIFY_COCKTAIL)\r\n\r\n    useEffect(() => {\r\n        if(loading === false && data){\r\n            setCocktail(data.cocktail);\r\n        }\r\n    }, [loading, data])\r\n\r\n    if (loading) return null;\r\n    if (error) return `Error! ${error}`;\r\n\r\n    const updateCocktail = () => {\r\n        const {id, name, description, ingredient_id, gout_id, difficulty_id} = cocktail\r\n        modifyCocktail({variables: {name, description, ingredient_id, gout_id,difficulty_id: parseInt(difficulty_id) , id}})\r\n    }\r\n\r\n    const updateIngredients = (ingredients) => {\r\n        setCocktail((c) => {return {...c, ingredient_id: ingredients.map(({id}) => id)}})\r\n    }\r\n    const updateGouts = (gouts) => {\r\n        setCocktail((c) => {return {...c, gout_id: gouts.map(({id}) => id)}})\r\n    }\r\n\r\n    if(cocktail){\r\n        const {name, description, ingredient_id, gout_id, difficulty_id} = cocktail\r\n        return (\r\n            <Container style={{marginTop: \"1%\", marginBottom: \"1%\"}}>\r\n    \r\n            \r\n            <Form autoComplete=\"off\" onSubmit={updateCocktail} style={{width: \"60%\", marginLeft: \"20%\"}} action=\"../cocktails\" method=\"get\">\r\n                <h3>Edition de cocktail</h3>\r\n    \r\n                <Form.Group controlId=\"name\">\r\n                    <Form.Label>Titre</Form.Label>\r\n                    <Form.Control type=\"text\" \r\n                    value={name} \r\n                    onChange={e => {\r\n                        const val = e.target.value;\r\n                        setCocktail(c => {\r\n                            return { ...c, name: val }\r\n                        });\r\n                    }}  \r\n                    />\r\n                </Form.Group>\r\n    \r\n                <Form.Group controlId=\"description\">\r\n                    <Form.Label>Description</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows=\"10\" value={description}\r\n                    onChange={e => {\r\n                        const val = e.target.value;\r\n                        setCocktail(c => {\r\n                            return { ...c, description: val }\r\n                        });\r\n                    }}\r\n                    />\r\n                </Form.Group>\r\n    \r\n                <Form.Group controlId=\"ingredient_id\">\r\n                <Form.Label>Ingredients</Form.Label>\r\n                    <Ingredients ingredients={ingredient_id} updateCallback={updateIngredients}/>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"gout_id\">\r\n                <Form.Label>Gouts</Form.Label>\r\n                    <Gouts gouts={gout_id} updateCallback={updateGouts}/>\r\n                </Form.Group>\r\n                \r\n                <Form.Group controlId=\"difficulty_id\">\r\n                    <Form.Label>Difficulté </Form.Label>\r\n                    <Form.Control as=\"select\"\r\n                    onChange={e => {\r\n                        const val = e.target.value;\r\n                        setCocktail(c => {\r\n                            return { ...c, difficulty_id: val }\r\n                        });\r\n                    }}\r\n                    >\r\n                    <option value={0} selected={difficulty_id === 0} >0</option>\r\n                    <option value={1} selected={difficulty_id === 1} >1</option>\r\n                    <option value={2} selected={difficulty_id === 2}>2</option>\r\n                    <option value={3} selected={difficulty_id === 3}>3</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                    Valider\r\n                </Button>\r\n            </Form>\r\n            \r\n            </Container>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nconst Ingredients = ({ingredients, updateCallback}) => {\r\n    const { loading, error, data } = useQuery(GET_INGREDIENTS);\r\n    const selection = useRef(null)\r\n\r\n    if (loading) return null;\r\n    if (error) return `Error! ${error}`;\r\n    \r\n    const updateCocktail = () => {\r\n        updateCallback(selection.current.getSelectedItems())\r\n    }\r\n\r\n    const selectedIngredients = ingredients && data.ingredients.filter(({id}) => ingredients.includes(id))\r\n    return (\r\n        <Multiselect\r\n            options={data.ingredients} // Options to display in the dropdown\r\n            selectedValues={selectedIngredients} // Preselected value to persist in dropdown\r\n            displayValue=\"name\" // Property name to display in the dropdown options\r\n            ref={selection}\r\n            onSelect={updateCocktail}\r\n            onRemove={updateCocktail}\r\n        />\r\n    )\r\n}\r\n\r\nconst Gouts = ({gouts, updateCallback}) => {\r\n    const { loading, error, data } = useQuery(GET_GOUTS);\r\n    const selection = useRef(null)\r\n\r\n    if (loading) return null;\r\n    if (error) return `Error! ${error}`;\r\n\r\n    const updateCocktail = () => {\r\n        updateCallback(selection.current.getSelectedItems())\r\n    }\r\n\r\n    const selectedGouts = gouts && data.gouts.filter(({id}) => gouts.includes(id))\r\n    return (\r\n        <Multiselect\r\n            options={data.gouts} // Options to display in the dropdown\r\n            selectedValues={selectedGouts} // Preselected value to persist in dropdown\r\n            displayValue=\"name\" // Property name to display in the dropdown options\r\n            ref={selection}\r\n            onSelect={updateCocktail}\r\n            onRemove={updateCocktail}\r\n        />\r\n    )\r\n}\r\n\r\n\r\nexport default Cocktail","import React,{useState , useEffect, useRef} from \"react\";\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport {Form, Container, Button} from \"react-bootstrap\"\r\nimport { Multiselect } from 'multiselect-react-dropdown';\r\n\r\nconst GET_INGREDIENTS = gql`\r\n    {\r\n        ingredients {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nconst GET_GOUTS = gql`\r\n    {\r\n        gouts {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nconst CREATE_COCKTAIL = gql`\r\n    mutation CreateCocktail($name: String, $description: String, $ingredient_id: [Int], $gout_id: [Int], $difficulty_id: Int){\r\n        createCocktail(name: $name, description: $description, ingredient_id: $ingredient_id, gout_id: $gout_id, difficulty_id: $difficulty_id)\r\n    }\r\n`\r\n\r\nconst Cocktail = () => {\r\n\r\n\r\n    const [ cocktail, setCocktail ] = useState({name: \"\", description: \"\", ingredient_id:[], gout_id:[], difficulty_id:1});\r\n    const [postCocktail] = useMutation(CREATE_COCKTAIL)\r\n\r\n    const createCocktail = () => {\r\n        const {id, name, description, ingredient_id, gout_id, difficulty_id} = cocktail\r\n        postCocktail({variables: {name, description, ingredient_id, gout_id,difficulty_id: parseInt(difficulty_id) , id}})\r\n    }\r\n\r\n    const updateIngredients = (ingredients) => {\r\n        setCocktail((c) => {return {...c, ingredient_id: ingredients.map(({id}) => id)}})\r\n    }\r\n    const updateGouts = (gouts) => {\r\n        setCocktail((c) => {return {...c, gout_id: gouts.map(({id}) => id)}})\r\n    }\r\n\r\n    if(cocktail){\r\n        const {name, description, ingredient_id, gout_id, difficulty_id} = cocktail\r\n        return (\r\n            <Container style={{marginTop: \"1%\", marginBottom: \"1%\"}}>\r\n    \r\n            \r\n            <Form autoComplete=\"off\" onSubmit={createCocktail} style={{width: \"60%\", marginLeft: \"20%\"}} action=\"../cocktails\" method=\"get\">\r\n                <h3>Création d'un cocktail</h3>\r\n    \r\n                <Form.Group controlId=\"name\">\r\n                    <Form.Label>Titre</Form.Label>\r\n                    <Form.Control type=\"text\" \r\n                    value={name} \r\n                    onChange={e => {\r\n                        const val = e.target.value;\r\n                        setCocktail(c => {\r\n                            return { ...c, name: val }\r\n                        });\r\n                    }}  \r\n                    />\r\n                </Form.Group>\r\n    \r\n                <Form.Group controlId=\"description\">\r\n                    <Form.Label>Description</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows=\"10\" value={description}\r\n                    onChange={e => {\r\n                        const val = e.target.value;\r\n                        setCocktail(c => {\r\n                            return { ...c, description: val }\r\n                        });\r\n                    }}\r\n                    />\r\n                </Form.Group>\r\n    \r\n                <Form.Group controlId=\"ingredient_id\">\r\n                <Form.Label>Ingredients</Form.Label>\r\n                    <Ingredients ingredients={ingredient_id} updateCallback={updateIngredients}/>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"gout_id\">\r\n                <Form.Label>Gouts</Form.Label>\r\n                    <Gouts gouts={gout_id} updateCallback={updateGouts}/>\r\n                </Form.Group>\r\n                \r\n                <Form.Group controlId=\"difficulty_id\">\r\n                    <Form.Label>Difficulté </Form.Label>\r\n                    <Form.Control as=\"select\"\r\n                    onChange={e => {\r\n                        const val = e.target.value;\r\n                        setCocktail(c => {\r\n                            return { ...c, difficulty_id: val }\r\n                        });\r\n                    }}\r\n                    >\r\n                    <option value={0} selected={difficulty_id === 0} >0</option>\r\n                    <option value={1} selected={difficulty_id === 1} >1</option>\r\n                    <option value={2} selected={difficulty_id === 2}>2</option>\r\n                    <option value={3} selected={difficulty_id === 3}>3</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                    Valider\r\n                </Button>\r\n            </Form>\r\n            \r\n            </Container>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nconst Ingredients = ({ingredients, updateCallback}) => {\r\n    const { loading, error, data } = useQuery(GET_INGREDIENTS);\r\n    const selection = useRef(null)\r\n\r\n    if (loading) return null;\r\n    if (error) return `Error! ${error}`;\r\n    \r\n    const updateCocktail = () => {\r\n        updateCallback(selection.current.getSelectedItems())\r\n    }\r\n\r\n    const selectedIngredients = ingredients && data.ingredients.filter(({id}) => ingredients.includes(id))\r\n    return (\r\n        <Multiselect\r\n            options={data.ingredients} // Options to display in the dropdown\r\n            selectedValues={selectedIngredients} // Preselected value to persist in dropdown\r\n            displayValue=\"name\" // Property name to display in the dropdown options\r\n            ref={selection}\r\n            onSelect={updateCocktail}\r\n            onRemove={updateCocktail}\r\n        />\r\n    )\r\n}\r\n\r\nconst Gouts = ({gouts, updateCallback}) => {\r\n    const { loading, error, data } = useQuery(GET_GOUTS);\r\n    const selection = useRef(null)\r\n\r\n    if (loading) return null;\r\n    if (error) return `Error! ${error}`;\r\n\r\n    const updateCocktail = () => {\r\n        updateCallback(selection.current.getSelectedItems())\r\n    }\r\n\r\n    const selectedGouts = gouts && data.gouts.filter(({id}) => gouts.includes(id))\r\n    return (\r\n        <Multiselect\r\n            options={data.gouts} // Options to display in the dropdown\r\n            selectedValues={selectedGouts} // Preselected value to persist in dropdown\r\n            displayValue=\"name\" // Property name to display in the dropdown options\r\n            ref={selection}\r\n            onSelect={updateCocktail}\r\n            onRemove={updateCocktail}\r\n        />\r\n    )\r\n}\r\n\r\n\r\nexport default Cocktail","import React from \"react\"\r\nimport {\r\n    BrowserRouter as Router,\r\n    useRouteMatch,\r\n    Switch,\r\n    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\n  \r\nimport CocktailList from \"./CocktailList\"\r\nimport Cocktail from \"./Cocktail\"\r\nimport NewCocktail from \"./NewCocktail\"\r\n\r\nconst Home = () => {\r\n    let {path} = useRouteMatch()\r\n    return(\r\n        <Router>\r\n        <Switch>\r\n            \r\n            <Route exact path={path}>\r\n            <a href=\"../\">Retour</a>\r\n                <CocktailList/>\r\n            </Route>\r\n            <Route exact path={`${path}/new`}>\r\n                <NewCocktail/>\r\n            </Route>\r\n            <Route path={`${path}/:id`}>\r\n                <Cocktail/>\r\n            </Route>\r\n        </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport {Link, useRouteMatch} from \"react-router-dom\";\r\nimport {Table, Container, Button} from \"react-bootstrap\"\r\n\r\nconst GET_INGREDIENTS = gql`\r\n  {\r\n    ingredients {\r\n        id\r\n        name\r\n        aliases\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETE_INGREDIENTS = gql`\r\nmutation DeleteIngredient($id: Int){\r\n    deleteIngredient(id: $id)\r\n}\r\n`\r\n\r\nconst IngredientList = () => {\r\n\r\n    const { loading, error, data } = useQuery(GET_INGREDIENTS);\r\n    const[supprIngredient] = useMutation(DELETE_INGREDIENTS)\r\n    let {url} = useRouteMatch()\r\n    \r\n    if (loading) return 'Loading...';\r\n    if (error) return `Error! ${error.message}`;\r\n\r\n    const deleteIngredient = (id) => {\r\n      const r = window.confirm(\"Vous etes sur de supprimer ce cocktail ?\")\r\n      if(r) supprIngredient({variables: {id}})\r\n      window.location.reload(false);\r\n    }\r\n\r\n    return (\r\n      <Container style={{marginTop: \"1%\"}}>\r\n\r\n      <h2> Ingredients </h2>\r\n      <Link to={`${url}/new`}><Button>CREER</Button></Link>\r\n      <Table striped bordered hover style={{marginTop: \"1%\"}}> \r\n        {data.ingredients.map(({id, name, aliases}) => (\r\n          <tr key={id}>\r\n            <td>\r\n                {name}\r\n            </td>\r\n            <td>\r\n                {aliases && aliases.join(',')}\r\n            </td>\r\n            <td>\r\n                <Link to={`${url}/${id}`}>Modifier</Link>\r\n            </td>\r\n            <td>\r\n              <Button onClick={() => deleteIngredient(id)}>Supprimer</Button>\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </Table>\r\n\r\n      </Container>\r\n    );\r\n  }\r\n\r\nexport default IngredientList;","import React,{useState , useEffect, useRef} from \"react\";\r\nimport gql from 'graphql-tag';\r\nimport {useParams} from \"react-router-dom\";\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport {Form, Container, Button} from \"react-bootstrap\"\r\n\r\nconst GET_INGREDIENT = gql`\r\n    query Ingredient($id: Int!) {\r\n        ingredient(id: $id) {\r\n            id\r\n            name\r\n            aliases\r\n        }\r\n    }\r\n`;\r\n\r\nconst MODIFY_INGREDIENT = gql`\r\n    mutation ModifyIngredient($name: String, $aliases: [String],$id: Int){\r\n        modifyIngredient(name: $name, aliases: $aliases, id: $id)\r\n    }\r\n`\r\n\r\nconst Ingredient = () => {\r\n\r\n    let { id } = useParams()\r\n    const [ ingredient, setIngredient ] = useState({});\r\n    const { loading, error, data } = useQuery(GET_INGREDIENT, {\r\n        variables: { id : parseInt(id) },\r\n    });\r\n    const [modifyIngredient] = useMutation(MODIFY_INGREDIENT)\r\n\r\n    useEffect(() => {\r\n        if(loading === false && data){\r\n            setIngredient(data.ingredient);\r\n        }\r\n    }, [loading, data])\r\n\r\n    if (loading) return null;\r\n    if (error) return `Error! ${error}`;\r\n\r\n    const updateIngredient = () => {\r\n        const {id, name, aliases} = ingredient\r\n        modifyIngredient({variables: {id, name, aliases}})\r\n    }\r\n\r\n    if(ingredient){\r\n        const {name, aliases} = ingredient\r\n        return (\r\n            <Container style={{marginTop: \"1%\", marginBottom: \"1%\"}}>   \r\n            <Form autoComplete=\"off\" onSubmit={updateIngredient} style={{width: \"60%\", marginLeft: \"20%\"}} action=\"../ingredients\" method=\"get\">\r\n                <h3>Edition d'ingrédient</h3>\r\n    \r\n                <Form.Group controlId=\"name\">\r\n                    <Form.Label>Titre</Form.Label>\r\n                    <Form.Control type=\"text\" \r\n                    value={name} \r\n                    onChange={e => {\r\n                        const val = e.target.value;\r\n                        setIngredient(c => {\r\n                            return { ...c, name: val }\r\n                        });\r\n                    }}  \r\n                    />\r\n                </Form.Group>\r\n                    \r\n                <Form.Group controlId=\"description\">\r\n                    <Form.Label>Aliases</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows=\"10\" value={aliases&& aliases.join(\",\")}\r\n                    onChange={e => {\r\n                        const val = e.target.value;\r\n                        setIngredient(c => {\r\n                            return { ...c, aliases: val.split(\",\") }\r\n                        });\r\n                    }}\r\n                    />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                    Valider\r\n                </Button>\r\n            </Form>\r\n            </Container>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\nexport default Ingredient","import React,{useState , useEffect, useRef} from \"react\";\r\nimport gql from 'graphql-tag';\r\nimport {useParams} from \"react-router-dom\";\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport {Form, Container, Button} from \"react-bootstrap\"\r\n\r\nconst CREATE_INGREDIENT = gql`\r\n    mutation CreateIngredient($name: String, $aliases: [String]){\r\n        createIngredient(name: $name, aliases: $aliases)\r\n    }\r\n`\r\n\r\nconst Ingredient = () => {\r\n\r\n    const [ ingredient, setIngredient ] = useState({name: \"\", aliases:[]});\r\n    const [createIngredient] = useMutation(CREATE_INGREDIENT)\r\n\r\n    const postIngredient = () => {\r\n        const {name, aliases} = ingredient\r\n        createIngredient({variables: {name, aliases}})\r\n    }\r\n\r\n    if(ingredient){\r\n        const {name, aliases} = ingredient\r\n        return (\r\n            <Container style={{marginTop: \"1%\", marginBottom: \"1%\"}}>   \r\n            <Form autoComplete=\"off\" onSubmit={postIngredient} style={{width: \"60%\", marginLeft: \"20%\"}} action=\"../ingredients\" method=\"get\">\r\n                <h3>Création d'ingrédient</h3>\r\n    \r\n                <Form.Group controlId=\"name\">\r\n                    <Form.Label>Titre</Form.Label>\r\n                    <Form.Control type=\"text\" \r\n                    value={name} \r\n                    onChange={e => {\r\n                        const val = e.target.value;\r\n                        setIngredient(c => {\r\n                            return { ...c, name: val }\r\n                        });\r\n                    }}  \r\n                    />\r\n                </Form.Group>\r\n                    \r\n                <Form.Group controlId=\"description\">\r\n                    <Form.Label>Aliases</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows=\"10\" value={aliases&& aliases.join(\",\")}\r\n                    onChange={e => {\r\n                        const val = e.target.value;\r\n                        setIngredient(c => {\r\n                            return { ...c, aliases: val.split(\",\") }\r\n                        });\r\n                    }}\r\n                    />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                    Valider\r\n                </Button>\r\n            </Form>\r\n            </Container>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\nexport default Ingredient","import React from \"react\"\r\nimport {\r\n    BrowserRouter as Router,\r\n    useRouteMatch,\r\n    Switch,\r\n    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\n  \r\nimport IngredientList from \"./IngredientList\"\r\nimport Ingredient from \"./Ingredient\"\r\nimport NewIngredient from \"./NewIngredient\"\r\nconst Home = () => {\r\n\r\n    let {path} = useRouteMatch()\r\n    return(\r\n        <Router>\r\n        <Switch>\r\n            <Route exact path={path}>\r\n            <a href=\"../\">Retour</a>\r\n                <IngredientList/>\r\n            </Route>\r\n            <Route exact path={`${path}/new`}>\r\n                <NewIngredient/>\r\n            </Route>\r\n            <Route path={`${path}/:id`}>\r\n                <Ingredient/>\r\n            </Route>\r\n        </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default Home","import React,{useEffect, useState} from \"react\"\r\nimport { useLazyQuery, useQuery } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\nimport { concat } from \"apollo-boost\";\r\n\r\nconst AVAIL_COCKTAILS = gql`\r\n  query AvailCocktails($ingredient_id: [Int!]!){\r\n        availCocktails(ingredient_id: $ingredient_id){\r\n            name\r\n            gout_id\r\n            difficulty_id\r\n        }\r\n  }\r\n`\r\n\r\nconst Cocktails = ({ingredient_id}) => {\r\n    const [getAvailCocktails, {data}] = useLazyQuery(AVAIL_COCKTAILS)\r\n    const [arrayGout, setArrayGout] = useState([])\r\n    useEffect(() => {\r\n        getAvailCocktails({ variables: {ingredient_id}})\r\n        if(data){\r\n                const mapGout = data.availCocktails.map(({gout_id}) => gout_id.join(\",\")).join(',')\r\n                const arrayGout = mapGout.split(\",\").reduce((array, current) => {\r\n                    if(!array.includes(parseInt(current))) array.push(parseInt(current))\r\n                    return array\r\n                },[])\r\n                setArrayGout(arrayGout)\r\n            }\r\n    }, [ingredient_id, getAvailCocktails])\r\n\r\n    const CountCocktail = () => {\r\n        if(data){\r\n            return <p>{data && data.availCocktails.length} cocktails disponibles</p>\r\n        }else{\r\n            return <p>0 cocktails disponibles</p>\r\n        }\r\n    }\r\n\r\n    return(\r\n            <div>\r\n                <h2>Cocktail disponible</h2>\r\n                <CountCocktail />\r\n                {\r\n                    arrayGout.map(\r\n                        (id) => <Gouts id={id} cocktails={data && data.availCocktails}/>\r\n                    )\r\n                }\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Cocktails\r\n\r\n\r\nconst GET_GOUT = gql`\r\n    query Gout($id: Int!){\r\n        gout(id: $id){\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nconst Gouts = ({id, cocktails}) => {\r\n    const { loading, error, data } = useQuery(GET_GOUT, {\r\n        variables: { id : parseInt(id) },\r\n    });\r\n\r\n    const countCocktail = cocktails && cocktails.filter(({gout_id}) => gout_id.includes(id)).length\r\n\r\n    if(!isNaN(id)){\r\n        return <p style={{marginBottom: 0}}>Dont {countCocktail} {data && data.gout.name}</p>\r\n    }\r\n    \r\n    return false\r\n}","import React,{useRef, useState, useEffect} from \"react\"\r\nimport {useLazyQuery } from '@apollo/react-hooks';\r\nimport { Multiselect } from 'multiselect-react-dropdown';\r\nimport gql from 'graphql-tag';\r\n\r\nconst GET_INGREDIENTS = gql`\r\n  query BestIngredients($inventory: [Int]){\r\n    bestIngredients(inventory: $inventory) {\r\n        id\r\n        name\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_INVENTORY_SELECTION = gql`\r\n  query InventorySelection($inventory: [Int], $cluster: [Int], $f_gout: [Int], $f_difficulty: [Int]){\r\n    inventorySelection(inventory: $inventory, cluster : $cluster, filter_gout:$f_gout, filter_difficulty:$f_difficulty) {\r\n        id\r\n        name\r\n    }\r\n  }\r\n`;\r\n\r\n\r\n\r\nconst Inventory = ({allIngredients, updateCallback}) => {\r\n    \r\n    const inventory = useRef([])\r\n    const [ingredients, setIngredients] = useState()\r\n    const [getFilteredIngredients, {data}] = useLazyQuery(GET_INGREDIENTS)\r\n    const [getInventorySelection, {data: newData}] = useLazyQuery(GET_INVENTORY_SELECTION)\r\n\r\n    useEffect(() => {\r\n        setIngredients(allIngredients)\r\n        if(data){\r\n            setIngredients(data.bestIngredients);\r\n        }\r\n    }, [data, allIngredients, inventory])\r\n    \r\n    \r\n    const updateIngredients = () => {\r\n        let inventorySelected = inventory.current.getSelectedItems()\r\n        const inventoryArray = inventorySelected.map((el) => el.id)\r\n        getFilteredIngredients({ variables: { inventory : inventoryArray } })\r\n        getInventorySelection({variables: { inventory: inventoryArray, cluster: [], f_gout: [], f_difficulty: [] }})\r\n        updateCallback(newData && newData.inventorySelection, inventoryArray)\r\n    }\r\n\r\n    return(\r\n            <div>\r\n                <h2>Inventaire</h2>\r\n                <Multiselect autoComplete=\"off\"\r\n                    options={ingredients && ingredients} // Options to display in the dropdown\r\n                    displayValue=\"name\" // Property name to display in the dropdown options\r\n                    ref={inventory}\r\n                    onSelect={updateIngredients}\r\n                    onRemove={updateIngredients}\r\n                />\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Inventory","import React,{useRef, useState, useEffect} from \"react\"\r\nimport { useLazyQuery } from '@apollo/react-hooks';\r\nimport { Multiselect } from 'multiselect-react-dropdown';\r\nimport gql from 'graphql-tag';\r\n\r\nconst GET_INVENTORY_SELECTION = gql`\r\n  query InventorySelection($inventory: [Int], $cluster: [Int], $f_gout: [Int], $f_difficulty: [Int]){\r\n    inventorySelection(inventory: $inventory, cluster : $cluster, filter_gout:$f_gout, filter_difficulty:$f_difficulty) {\r\n        id\r\n        name\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nconst Craft = ({inventory, updateCallback}) => {\r\n    \r\n    //ingredients selected\r\n    const cluster = useRef([])\r\n    //all ingredients can be selected\r\n    const [clusterList, setClusterList] = useState()\r\n\r\n    const [getInventorySelection, {data}] = useLazyQuery(GET_INVENTORY_SELECTION)\r\n\r\n    useEffect(() => {\r\n        setClusterList(inventory)\r\n        if(data){\r\n            setClusterList(data.inventorySelection)\r\n        }\r\n    }, [data,inventory])\r\n\r\n    const updateInventory = () => {\r\n        let clusterSelected = cluster.current.getSelectedItems()\r\n        const clusterArray = clusterSelected.map(el => el.id)\r\n        //clusterArray for created cocktails\r\n        updateCallback(clusterArray)\r\n        getInventorySelection({variables: { inventory: inventory.map(e => e.id), cluster: clusterArray, f_gout: [], f_difficulty: [] }})\r\n    }\r\n\r\n    return(\r\n            <div>\r\n                <h2>Craft</h2>\r\n                <Multiselect autoComplete=\"off\"\r\n                    options={clusterList && clusterList} // Options to display in the dropdown\r\n                    displayValue=\"name\" // Property name to display in the dropdown options\r\n                    ref={cluster}\r\n                    onSelect={updateInventory}\r\n                    onRemove={updateInventory}\r\n                />\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Craft","import React,{useEffect} from \"react\"\r\nimport gql from 'graphql-tag';\r\nimport { useLazyQuery } from '@apollo/react-hooks';\r\n\r\nconst CREATED_COCKTAILS = gql`\r\n    query CreatedCocktails($cluster: [Int]){\r\n        createdCocktails(cluster: $cluster){\r\n            name\r\n            description\r\n        }\r\n    }\r\n`\r\n\r\nconst Cocktail = ({cluster}) => {\r\n    const [getCreatedCocktails, {data}] = useLazyQuery(CREATED_COCKTAILS)\r\n    useEffect(() => {\r\n        getCreatedCocktails({variables: {cluster}})\r\n    }, [cluster, getCreatedCocktails])\r\n\r\n    return(\r\n            <div>\r\n                <h2>Cocktail crafté</h2>\r\n                {\r\n                    data && data.createdCocktails.map((cocktail) => {\r\n                        console.log(cocktail)\r\n                        return(\r\n                            <div>\r\n                                <p>-- {cocktail.name}</p>\r\n                                <p>{cocktail.description}</p>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Cocktail","import React,{useState, useEffect} from \"react\"\r\nimport {Container} from \"react-bootstrap\"\r\nimport { useQuery} from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\n\r\nimport DispoCocktail from \"./DispoCocktail\"\r\nimport Inventory from \"./Inventory\"\r\nimport Craft from \"./Craft\"\r\nimport CreateCocktail from \"./CreateCocktail\"\r\n\r\nconst GET_INGREDIENTS = gql`\r\n  query BestIngredients($inventory: [Int]){\r\n    bestIngredients(inventory: $inventory) {\r\n        id\r\n        name\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nconst Test = () => {\r\n\r\n    const [ingredients, setIngredients] = useState([])\r\n    const [clusterArray, setClusterArray] = useState([])\r\n    const [inventoryArray, setInventoryArray] = useState([])\r\n    const [inventorySelected, setInventorySelected] = useState([])\r\n\r\n    const { loading, error, data } = useQuery(GET_INGREDIENTS, {\r\n        variables: { inventory:[] }\r\n    });\r\n\r\n    useEffect(() => {\r\n        if(loading === false && data){\r\n            setIngredients(data.bestIngredients);\r\n        }\r\n    }, [loading, data])\r\n    \r\n    if (loading) return null;\r\n    if (error) return `Error! ${error}`;\r\n    \r\n    const updateCluster = (array) => {\r\n        setClusterArray(array)\r\n    }\r\n\r\n    const updateInventory = (selection, array) => {\r\n        setInventoryArray(array)\r\n        setInventorySelected(selection)\r\n    }   \r\n\r\n    if(ingredients){\r\n        return(\r\n            <Container style={{marginTop: \"1%\", marginBottom: \"1%\"}}>\r\n                <DispoCocktail ingredient_id={inventoryArray}/>\r\n                <Inventory allIngredients={ingredients} updateCallback={updateInventory} />\r\n                <Craft inventory={inventorySelected} updateCallback={updateCluster} />\r\n                <CreateCocktail cluster={clusterArray} />\r\n            </Container>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default Test","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport {Container, ListGroup} from \"react-bootstrap\"\n\nimport CocktailHome from \"../Components/Cocktail/CocktailHome\"\nimport IngredientHome from \"../Components/Ingredient/IngredientHome\"\nimport Test from \"../Components/Tests/Test\"\n\nconst link = new HttpLink({ uri: 'https://env-7682161.hidora.com/graphql' });\nconst cache = new InMemoryCache()\n\nconst client = new ApolloClient({\n  link,\n  cache,\n});\n\nfunction App() {\n  \n  return (\n    <ApolloProvider client={client}>\n      <Router basename=\"/\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Container style={{marginTop: \"1%\"}}>\n                <h2>CocktailMania API</h2>\n              <ListGroup>\n                <ListGroup.Item><Link to=\"/cocktails\">Cocktails</Link></ListGroup.Item>\n                <ListGroup.Item><Link to=\"/ingredients\">Ingrédients</Link></ListGroup.Item>\n                <ListGroup.Item><Link to=\"/tests\">Tester</Link></ListGroup.Item>\n              </ListGroup>\n            </Container>\n          </Route>\n          <Route path=\"/cocktails\">\n            <CocktailHome/>\n          </Route>\n          <Route path=\"/ingredients\">\n            <IngredientHome/>\n          </Route>\n          <Route path=\"/tests\">\n            <Test/>\n          </Route>\n        </Switch>\n        \n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}